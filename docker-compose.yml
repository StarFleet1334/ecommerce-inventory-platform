services:
  namesrv:
    image: apache/rocketmq:5.3.3
    container_name: rmqnamesrv
    ports:
      - ${ROCKETMQ_NAMESRV_PORT:-9876}:9876
    volumes:
      - ./rocketmq/data/namesrv-logs:/home/rocketmq/logs
    command: sh mqnamesrv
    networks:
      rocketmq-net:
        aliases:
          - rmqnamesrv
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 9876"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["all", "dev", "prod"]

  broker:
    image: apache/rocketmq:5.3.3
    container_name: rmqbroker
    depends_on:
      - namesrv
    ports:
      - 10909:10909
      - 10911:10911
      - 10912:10912
    volumes:
      - rocketmq-store:/data/rocketmq/store
      - ./rocketmq/data/broker/logs:/home/rocketmq/logs
      - ./rocketmq/conf/broker.properties:/home/rocketmq/conf/broker.properties
    environment:
      NAMESRV_ADDR: rmqnamesrv:9876
    command: sh mqbroker -c /home/rocketmq/conf/broker.properties
    networks:
      rocketmq-net:
        aliases:
          - rmqbroker
    healthcheck:
      test:
        ["CMD", "sh", "-c", "nc -z localhost 10911 && nc -z localhost 10909"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    profiles: ["all", "dev", "prod"]

  dashboard:
    image: apacherocketmq/rocketmq-dashboard:latest
    container_name: rmqdashboard
    depends_on:
      - namesrv
      - broker
    ports:
      - ${ROCKETMQ_DASHBOARD_PORT:-8080}:8080
    environment:
      JAVA_OPTS: "-Drocketmq.namesrv.addr=rmqnamesrv:9876"
    networks:
      rocketmq-net:
        aliases:
          - rmqdashboard
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["all", "dev"]

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass "${REDIS_PASSWORD:-defaultpassword}"
    env_file:
      - .env
    networks:
      rocketmq-net:
        aliases:
          - redis
    healthcheck:
      test:
        ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-defaultpassword}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["all", "dev", "prod"]

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "${ZIPKIN_PORT:-9412}:9411"
    networks:
      rocketmq-net:
        aliases:
          - zipkin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9411/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["all", "dev", "prod"]

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "${INVENTORY_SERVICE_PORT:-8081}:8081"
    env_file:
      - .env
    environment:
      - SPRING_APPLICATION_NAME=inventory-service
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1
    depends_on:
      - namesrv
      - broker
      - zipkin
    networks:
      rocketmq-net:
        aliases:
          - inventory-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/swagger-ui/index.html"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["all", "dev", "prod"]

  order-processing-service:
    build:
      context: ./order-processing-service
      dockerfile: Dockerfile
    container_name: order-processing-service
    ports:
      - "${ORDER_PROCESSING_SERVICE_PORT:-8083}:8083"
    env_file:
      - .env
    environment:
      - SPRING_APPLICATION_NAME=order-processing-service
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1
    depends_on:
      - namesrv
      - broker
      - zipkin
    networks:
      rocketmq-net:
        aliases:
          - order-processing-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/swagger-ui/index.html"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["all", "dev", "prod"]

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8070}:8070"
      - "${API_GATEWAY_MANAGEMENT_PORT:-8071}:8071"
    env_file:
      - .env
    environment:
      - SPRING_APPLICATION_NAME=api-gateway
      - SERVER_PORT=8070
      - REWRITE_BACKEND_URI_PRIMARY=http://inventory-service:8081
      - REWRITE_BACKEND_URI_SECONDARY=http://order-processing-service:8083
      - REWRITE_BACKEND_NAME_PRIMARY=inventory-service
      - REWRITE_BACKEND_NAME_SECONDARY=order-processing-service
      - MANAGEMENT_SERVER_PORT=8071
      - MANAGEMENT_ENDPOINT_GATEWAY_ACCESS=read-only
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=gateway,health,info
      - LOGGING_LEVEL_ORG_EXAMPLE_APIGATEWAY=DEBUG
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USER=${REDIS_USER:-default}
      - CRYPTO_SECRET=${CRYPTO_SECRET}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REPLENISH_RATE=${REPLENISH_RATE}
      - BURST_CAPACITY=${BURST_CAPACITY}
      - RATE_DURATION=${RATE_DURATION}
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1
      - LOGGING_PATTERN_CORRELATION=[$${SPRING_APPLICATION_NAME:},%X{traceId:-},%X{spanId:-}]
      - LOGGING_INCLUDE_APPLICATION_NAME=false
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - redis
      - inventory-service
      - order-processing-service
      - zipkin
    networks:
      rocketmq-net:
        aliases:
          - api-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8071/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    profiles: ["all", "dev", "prod"]

  graphs-service:
    build:
      context: ./graphs
      dockerfile: Dockerfile
    container_name: graphs-service
    ports:
      - "${GRAPHS_SERVICE_PORT:-8090}:8090"
    env_file:
      - .env
    environment:
      - SPRING_APPLICATION_NAME=graphs-service
    depends_on:
      - namesrv
      - broker
    networks:
      rocketmq-net:
        aliases:
          - graphs-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["all", "dev", "prod"]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    env_file:
      - .env
    depends_on:
      - namesrv
      - broker
    networks:
      rocketmq-net:
        aliases:
          - backend
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:5000/calculate?originLat=0&originLon=0&destLat=0&destLon=0",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["all", "dev", "prod"]

  rocketmq-service:
    build:
      context: ./rocketmq-service
      dockerfile: Dockerfile
    container_name: rocketmq-service
    ports:
      - "${ROCKETMQ_SERVICE_PORT:-8085}:8085"
    env_file:
      - .env
    environment:
      - SPRING_APPLICATION_NAME=rocketmq-service
      - ROCKETMQ_NAME_SERVER=rmqnamesrv:9876
      - ROCKETMQ_BROKER_ADDRESS=rmqbroker:10911
      - APP_CONFIG_PATH=/app/config
    volumes:
      - ./rocketmq-service/config:/app/config
    depends_on:
      - namesrv
      - broker
    restart: unless-stopped
    networks:
      rocketmq-net:
        aliases:
          - rocketmq-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s
    profiles: ["all", "dev", "prod"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    env_file:
      - .env
    depends_on:
      - api-gateway
    networks:
      rocketmq-net:
        aliases:
          - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["all", "dev", "prod"]

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend-dev
    ports:
      - "${FRONTEND_DEV_PORT:-5173}:5173"
    env_file:
      - .env
    environment:
      - VITE_DEBUG=true
    depends_on:
      - api-gateway
    networks:
      rocketmq-net:
        aliases:
          - frontend-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["dev"]

volumes:
  rocketmq-store:

networks:
  rocketmq-net:
    driver: bridge
